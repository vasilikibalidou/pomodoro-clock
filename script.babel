class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      break: 5,
      session: 25,
      mode: 'Session',
      time: 25 * 60,
      active: 'off'
    }
  }
  
  componentDidUpdate(prevProps, prevState) {
    if(prevState.time === 0 && prevState.mode === 'Session') {
      this.audio.play();
      this.audio.currentTime = 0
      this.setState({
        time: this.state.break * 60,
        mode: 'Break'
      })
    } else if(prevState.time === 0 && prevState.mode === 'Break') {
      this.audio.play();
      this.audio.currentTime = 0
      this.setState({
        time: this.state.session * 60,
        mode: 'Session'
      })
    }
  }
  
  
  timer = () => {
    let mins = Math.floor(this.state.time / 60);
    let secs = this.state.time - mins * 60;
    secs = secs < 10 ? '0' + secs : secs;
    mins = mins < 10 ? '0' + mins : mins;
    return mins + ":" + secs;
  }
  
  
  
  countdown = () => {
    if(this.state.active === 'off') {
      this.start = setInterval(() => this.setState({
      time: this.state.time -1,
      active: 'on'
    }), 1000)
    } else if(this.state.active === 'on') {
      this.setState({
        time: this.state.time,
        active: 'off'
      })
      clearInterval(this.start);
    } 
  }
  
  reset = () => {
    this.setState({
      break: 5,
      session: 25,
      mode: 'Session',
      time: 25*60,
      active: 'off'
    })
    clearInterval(this.start);
    this.audio.pause();
    this.audio.currentTime = 0
  }
  
  handleIncBreak = () => {
    if(this.state.break<60) {
    this.setState({
      break: this.state.break+1
    })
    }
  }
  
  handleIncSession = () => {
    if(this.state.session<60) {
    this.setState({
      session: this.state.session+1,
      time: (this.state.session+1)*60
    })
    }
  }
  
  handleDecBreak = () => {
    if(this.state.break>1) {
    this.setState({
      break: this.state.break-1
    })
    }
  }
  
  handleDecSession = () => {
    if(this.state.session>1) {
    this.setState({
      session: this.state.session-1,
      time: (this.state.session-1)*60
    })
    } 
  }
  
  render() {
    return (
      <div id="clock" class="container">
        <h1>Pomodoro Clock</h1>
        <div class="row">
        <div id="break-label" class="col-sm-6">
          Break Length <br/>
          <button id="break-decrement" class="btn" onClick={this.handleDecBreak}>-</button>
          <span id="break-length">{this.state.break}</span>
          <button id="break-increment" class="btn" onClick={this.handleIncBreak}>+</button>
         </div>
       
        <div id="session-label" class="col-sm-6">
          Session Length <br/> 
         <button id="session-decrement" class="btn" onClick={this.handleDecSession}>-</button>
          <span id="session-length">{this.state.session}</span>
          <button id="session-increment" class="btn" onClick={this.handleIncSession}>+</button>
          </div>
        </div>
        
        <div id="timer-label">
          <h2>{this.state.mode}</h2>
          <h2 id="time-left">{this.timer()}</h2>
          <button id="start_stop" class="btn" onClick={this.countdown}>Start / Stop</button>
          <button id="reset" class="btn" onClick={this.reset}>Reset</button>
        </div>
        
        <audio id ="beep" src="http://soundbible.com/grab.php?id=1598&type=wav" ref={ref => this.audio = ref}></audio>
      </div>
    )
  }
}

ReactDOM.render(<App />,document.getElementById("app"))
